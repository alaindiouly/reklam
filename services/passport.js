const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const Keys = require('../config/keys');

// pulling schema out of mongoose
const User = mongoose.model('users');

// user is pulled out from DB and appended to req
// user.id (shortcut to _id generated by Mongo) is appended to req.session
passport.serializeUser((user, done) => {
  done(null, user.id);
});

// retrieving id stuffed into req.session
passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: Keys.googleClientID,
      clientSecret: Keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true,
    },

    // google returns accessToken, refreshToken, profile...
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ googleId: profile.id });
      if (existingUser) {
        return done(null, existingUser);
      }
      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);
