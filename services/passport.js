const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
var GitHubStrategy = require('passport-github2').Strategy;
const mongoose = require('mongoose');
const Keys = require('../config/keys');

// pulling schema out of mongoose
const User = mongoose.model('users');

passport.serializeUser((user, done) => {
  // only the user ID (_id generated by Mongo) is serialized to the session,
  // keeping the amount of data stored within the session small
  done(null, user.id);
});

passport.deserializeUser((id, done) => {
  // When subsequent requests are received, this ID is used to find the user,
  // which will be restored to req.user.
  User.findById(id).then((user) => {
    done(null, user);
  });
});

//============Google OAuth ============
passport.use(
  new GoogleStrategy(
    {
      clientID: Keys.googleClientID,
      clientSecret: Keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true,
    },
    //=========== OAUTH Protocol ==========
    // AFTER user gives his consent,
    // Google resource server returns an accessToken (+ refreshToken)
    // only valid within the context of the app + user
    // as well as the user profile
    async (accessToken, refreshToken, profile, done) => {
      const existingUser = await User.findOne({ socialId: profile.id });
      // done must be called in order to complete the authentication
      //TODO refactor with findOrcreate method
      if (existingUser) {
        return done(null, existingUser);
      }
      const user = await new User({ socialId: profile.id }).save();
      done(null, user);
    }
  )
);

//============GitHub OAuth ============
passport.use(
  new GitHubStrategy(
    {
      clientID: Keys.githubClientID,
      clientSecret: Keys.githubClientSecret,
      callbackURL: '/auth/github/callback',
      proxy: true,
    },
    async (accessToken, refreshToken, profile, done) => {
      // REMOVE
      console.log('üêµ: ', profile);
      User.findOrCreate({ socialId: profile.id }, function (err, user) {
        // done must be called in order to complete the authentication
        return done(err, user);
      });
    }
  )
);
